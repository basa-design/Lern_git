//Find the vowels in the string
#include<stdio.h>
int main()
{
    int a[]={'a','e','p'};
    int n=sizeof(a)/sizeof(a[0]);
    for(int i=0;i<n;i++)
    {
        if(a[i]=='a'||a[i]=='e'||a[i]=='i'||a[i]=='o'||a[i]=='u')
        {
           printf("%c ",a[i]);
        }
    }
}
//OUT PUT a e
-------------------------------------------------------------------------------------- 
//FREQUENCY OF ARRAY
#include <stdio.h>
int main() {
	int v1[] = {2, 4, 7, 4, 4, 3, 9, 3};
	int n = sizeof(v1) / sizeof(v1[0]);

	// Sorting the array in descending order
	for (int i = 0; i < n; i++) {
		for (int j = i + 1; j < n; j++) 
		{
			if (v1[i] < v1[j]) {
				int temp = v1[i];
				v1[i] = v1[j];
				v1[j] = temp;
			}
		}
	}

	// Printing the sorted array
	printf("Sorted array: ");
	for (int i = 0; i < n; i++) 
	{
		printf("%d ", v1[i]);
	}
	printf("\n");

	// Finding the frequency of each element
	int count = 1;
	for (int i = 1; i < n; i++) 
	{
		if (v1[i] == v1[i - 1])
		{
			count++;
		} else {
			printf("Number: %d, Times: %d\n", v1[i - 1], count);
			count = 1;  // Reset count for new number
		}
	}

	// Print the frequency of the last element
	printf("Number: %d, Times: %d\n", v1[n - 1], count);

	return 0;
}
//OUTPUT
//The string is a palindrome.

//output
//Sorted array: 9 7 4 4 4 3 3 2 
//Number: 9, Times: 1
//Number: 7, Times: 1
//Number: 4, Times: 3
//Number: 3, Times: 2
//Number: 2, Times: 1
----------------------------------------------------------------------------------
//SECOND MAXIMUM NUMBER IN THE ARRAY WITHOUT SORTING
#include <stdio.h>
int main() {
    int i;
    int a[] = {12, 13, 19, 14, 16, 18};
    int size=6;
    int max=a[1], second_max=a[0];
    if (size < 2) {
        printf("Array must contain at least two elements.\n");
        return 1;
    }
   
    for (i = 2; i < size; i++) 
    {
        if (a[i] > max)
        {
            second_max = max;
            max = a[i];
        }
        else if (a[i] > second_max && a[i] < max)
        {
            second_max = a[i];
        }
    }

    printf("The second maximum value is: %d\n", second_max);

    return 0;
}
//output
//The second maximum value is: 18
//logic concidering first two elements as a max and second_max and going to
// comapring one by one
---------------------------------------------------------------------------------
//REVERSE THE ARRAY
#include <stdio.h>
int main()
{
    int i,j,n=10,temp;
    int a[]={8,6,12,16,18,12,10,67,90,100,};
    for(i=0,j=n-1;i<j;i++,j--)
    {
        temp=a[i];
        a[i]=a[j];
        a[j]=temp;
    }
    for(i=0;i<n;i++)
    {
        printf("%d ",a[i]);
    }
}
//output
//100 90 67 10 12 18 16 12 6 8 
---------------------------------------------------------------------------------
//REVERSE THE WORD IN A STRING
#include <stdio.h>
int main()
{
    int i=0,j=0,k=0,temp=0,len=0;
    char a[]="hello raja";
    while(a[i]!='\0')
    {
        i++;
    }
    len=i;
    i--;
    while(j<i)
    {
        temp=a[i];
        a[i]=a[j];
        a[j]=temp;
        j++;
        i--;
    }
    i=0;
    j=0;
    while(i<len)
    {
        j=i;
        while(a[j]!=' '&&a[j]!='\0')
        {
            j++;
        }
        k=j-1;
        while(i<k)
        {
            temp=a[i];
            a[i]=a[k];
            a[k]=temp;
            k--;
            i++;
        }
        i=j+1;
    }
  printf("%s",a);
}

OUT PUT ->raja hello
---------------------------------------------------------------------------------
//MAXIMUM NUMBER IN THE ARRAY
#include<stdio.h>
int main()
{
    int i=0,j=0;
    int a[5]={15,18,29,30,47};
    int max=a[0];
    for(i=0;i<5;i++)
    {
        if(a[i]>max)
        {
            max=a[i];
        }
    }
    printf("%d",max);
}
//OUT PUT 47
----------------------------------------------------------------------------------
//REVERSE THE STRING
#include<stdio.h>
int main()
{
    int i,j,n=5;
    char temp;
    char a[]="hello";
    for(i=0,j=n-1;i<j;i++,j--)
    {
        temp=a[i];
        a[i]=a[j];
        a[j]=temp;
    }
      printf("%s ",a);   
    
}
//OUT PUT IS olleh
---------------------------------------------------------------------------------
 // SORTING OF ARRAY
#include<stdio.h>
int main()
{
    int i,j,temp,n=5;
    int a[5]={12,24,35,46,98};
    for(i=0;i<5;i++)
    {
        for(j=i+1;j<5;j++)
        {
            if(a[i]<a[j])
            {
                temp=a[i];
                a[i]=a[j];
                a[j]=temp;
            }
        }
        printf("%d ",a[i]);
    }
}

//OUT PUT IS 98 46 35 24 12
----------------------------------------------------------------------------------
//RECURSIVE FUNTION printing add numbers
#include<stdio.h>
void fun()
{
    static int x=10;
    if(x<=100)
    {
        if(x%2==0)
        {
             printf("%d",x);
        }
             x++;
             fun();
    }
}
int main()
{
    fun ();
}
//OUT PUT->101214161820222426283032343638404244464850525456586062646668707274767880828486889092949698100 
---------------------------------------------------------------------------------
//ADDING OF ARRAY
#include<stdio.h>
int main()
{
    int i=0,j=0,n=5,sum=0;
    int a[5]={12,87,43,56,78};
   for(i=0;i<5;i++)
   {
       if(a[i]!=n)
       {
        sum+=a[i];
       }
   }
   printf("%d",sum);
}
//OUT PUT IS 276
-------------------------------------------------------------------------------
//PALLINDROM OR NOT STRING
#include <stdio.h>
int main()
{
    int i=0,j=0,temp,length=5;
    char a[]="DADA";
    while(a[i]!='\0')
    {
        i++;
    }
    i--;
    while(i>j)
    {
        temp=a[i];
        a[i]=a[j];
        a[j]=temp;
        i--;
        j++;
    }
   length=i;
   j=length-1;
   i=0;
    int is_palindrome = 1;
    while (i < j) {
        if (a[i] != a[j]) {
            is_palindrome = 0;  // Not a palindrome
            break;
        }
        i++;
        j--;
    }
    if (!is_palindrome) {
        printf("The string is a palindrome.\n");
    } else {
        printf("The string is not a palindrome.\n");
    }
}
//OUTPUT
//The string is a palindrome.
--------------------------------------------------------------------------------- 
//PALINDROM OR NOT NUMBER
#include<stdio.h>
int main()
{
   int n=021,rem,rev=0,m;
   m=n;
   while(n!=0)
   {
       rem=n%10;
       n=n/10;
      rev=(rev*10)+rem;
   }
   if(m==rev)
   {
       printf("palandrom");
   }
   else
   {
       printf("NOT pallandrom");
   }
}
//OUT PUT IS not polindrom
---------------------------------------------------------------------------------
//REVERSE THE NUMBER
#include<stdio.h>
int main()
{
   int n=901,rem;
  
   while(n!=0)
   {
       rem=n%10;
       n=n/10;
      printf("%d",rem);
   }
}
//OUT PUT IS 129
----------------------------------------------------------------------------------
 //FIBINO SRERES NUMBER
#include<stdio.h>
int main()
{
    int a=0,b=1,n=20,fib=0,i=0;
    for(i=0;i<n;i++)
    {
        printf("%d ",a);
        fib=a+b;
        a=b;
        b=fib;
    }
}
//OUT PUT IS 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181
---------------------------------------------------------------------------------
//FACTORIAL NUMBER
#include<stdio.h>
int main()
{
    int i,fact=1,n=10;
    for(i=1;i<=10;i++)
    {
        fact =fact*i;
        printf("%d\n",fact);
    }
}
//OUT PUT IS 
//1
// 2
// 6
// 24
// 120
// 720
// 5040
// 40320
// 362880
// 3628800
---------------------------------------------------------------------------------
 //PRIME NUMBER OR NOT
#include<stdio.h>
int main()
{
    int i=2,n=68,count=0;
    for(i=2;i<=n;i++)
    {
        if(n%i==0)
        {
            count++;
        }
    }
    if(count==1)
    {
        printf("prime number");
    }
    else
    {
        printf("NOT prime number");
    }
}
//OUT PUT NOT prime number
---------------------------------------------------------------------------------
//SERUES OF PRIME NUMBER
#include <stdio.h>
int main()
{
   int i=2,j=2,n=61;
   for(i=2;i<=n;i++)
   {
        int count=0;
      for(j=2;j<i;j++)
      {
         
           if(i%j==0)
           {
               count++;
              break;
           }
      }
      if(count==0)
      {
           printf("%d ",i);
      }
   }
}
//OUT PUT IS 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61
---------------------------------------------------------------------------------
//DATA STRUCTUR LINKED LIST
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node* link;
};
struct node* head=NULL;
void insert_f(int item)
{
    struct node* temp=(struct node*)malloc(sizeof(struct node));
    if(temp!=NULL)
    {
        temp->data=item;
        temp->link=head;
        head=temp;
    }
}
void display()
{
    struct node* ptr=head;
    while(ptr!=NULL)
    {
        printf("%d ",ptr->data);
        ptr=ptr->link;
    }
}
void insert_r(int item)
{
    struct node* ptr=head;
    struct node* temp=(struct node*)malloc(sizeof(struct node));
    if(temp!=NULL)
    {
        temp->data=item;
        temp->link=NULL;
    }
    while(ptr->link!=NULL)
    {
        ptr=ptr->link;
    }
    ptr->link=temp;
}
void del_f()
{
    struct node* ptr=head;
    if(ptr!=NULL)
    {
        head=ptr->link;
        free(ptr);
        ptr=NULL;
    }
}
void del_r()
{
    struct node* ptr=head;
    struct node* pree=NULL;
    if(ptr!=NULL)
    {
        while(ptr->link!=NULL)
        {
            pree=ptr;
            ptr=ptr->link;
        }
        pree->link=ptr->link;
        free(ptr);
        ptr=NULL;
    }
}
void middel_insert(int item,int pos)
{
    struct node* ptr=head;
    struct node* temp=(struct node*)malloc(sizeof(struct node));
    if(temp!=NULL)
    {
        temp->data=item;
    }
    int i=1;
    while(i<pos-1)
    {
        ptr=ptr->link;
        i++;
    }
    temp->link=ptr->link;
    ptr->link=temp;
}
void mid_del(int pos)
{
    struct node* ptr=head;
    struct node* pree=NULL;
    if(ptr!=NULL)
    {
        int i=1;
        while(i<pos)
        {
            pree=ptr;
            ptr=ptr->link;
            i++;
        }
        if(i=1)
        {
            head=ptr->link;
            free(ptr);
            ptr=NULL;
        }
        else
        {
            pree->link=ptr->link;
            free(ptr);
            ptr=NULL;
        }
    }
}
void revers()
{
    struct node* current=head;
    struct node* next=NULL;
    struct node* pree=NULL;
    while(current!=NULL)
    {
        next=current->link;
        current->link=pree;
        pree=current;
        current=next;
    }
    head=pree;
}
void mid_node()
{
    struct node* ptr=head;
    struct node* pree=head;
    while(pree!=NULL&&pree->link!=NULL)
    {
        ptr=ptr->link;
        pree=pree->link->link;
    }
    printf(" the mid node is %d \n",ptr->data);
}
bool loop(struct node* head)
{
    struct node* slowptr = head;
    struct node* fastptr = head;

    // Traverse the list with two pointers
    while (slowptr && fastptr && fastptr->link) {
        slowptr = slowptr->link;               // Move slow pointer by 1
        fastptr = fastptr->link->link;         // Move fast pointer by 2

        // If the two pointers meet, there's a cycle
        if (slowptr == fastptr) {
            return true;  // Cycle detected
        }
    }

    // If we reach here, there is no cycle
    return false; // No cycle detected
}
int main()
{
    insert_f(10);
    insert_f(20);
    insert_f(30);
    insert_r(50);
    insert_r(60);
      //del_f();
      //del_r();
      middel_insert(100,3);
   middel_del(2);
   revers();
   mid_node();
    display();
  	if (loop(head)) 
	{
       	 printf("Cycle detected in the linked list.\n");
   	}
	 else
	{
      	  printf("No cycle in the linked list.\n");
  	}
  
}
//OUT PUT IS 
//the mid node is 10 
//60 50 10 100 30
----------------------------------------------------------------------------------
